                                                      |###############|
                                                      |#PROJECT-NOTES#|
                                                      |###############|
=================================================================================================================================================================================                             
Spring MVC |
===========|
                                               Building Spring Web Apps
                                               
                                               What is Spring MVC?
                                               
                               * Framework for building web applicatations in Java
                               
                               * Based on Model-View-Controller design pattern
                               
                               * Leverages features of the Core Spring Framework (IoC, DI)         
                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            Spring MVC Benefits
                                            
                               * The Spring way of building web apps UIs in Java
                               
                               * Leverage a set of reusable UI components
                               
                               * Help manage application state for web requests
                               
                               * Process form data: validation, conversion etc
                               
                               * Flexible configuration for the view layer
                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                               Spring MVC Documentation
                                               
                               www.luv2code.com/spring-mvc-docs             

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                             Components of a Spring MVC Application
                                             
                           * A set of web pages to layout UI components
                           
                           * A collection of Spring beans (controllers, services, etc...)
                           
                           * Spring configuration (XML, Annotations or Java)  
                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                         Spring MVC Front Controller
                                         
                            * Front controller known as DispatcherServlet
                                * Part of the Spring Framework
                                *Already developed by Spring Dev Team
                                
                            * You will Create                            
                               *Model Objects
                               *View templates
                               *Controller classes 
                                     
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                               
                               Controller
                                * Code created by developer
                                
                                * Contains your business logic
                                   * Handle the request
                                   * Store/retrieve data (db, web service...)
                                   * Place data in model    
                                   
                                * Send to appropriate view template                                             
                                                                                    
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
                                  Model
                                  * Model: contains your data
                                  
                                  * Store/retrieve data via backend systems
                                    * database, web service etc...
                                    * Use a Spring bean if you like
                                    
                                  * Place your data in the model
                                    * Data can be any Java object/collection
                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                   View Template
                                   * Spring MVC is flexible
                                     * Supports many view templates
                                     
                                   * Most common is JSP + JSTL
                                   
                                   * Developer creates a page
                                    * Displays data
                                    
                                    View template (more)
                                    
                                    * Other view templates supported
                                    
                                      * Thymeleaf, Groovy
                                      * Velocity, Freemaker, etc...
                                      
                                    * For details, see:
                                    
                                       www.luv2code.com/spring-mvc-views
                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                     Spring MVC Configuration Process - Part 1
                                     
                                     Add configurations to file: WEB-INF/web.xml
                                     
                            1) Configure Spring MVC Dispatcher Servlet
                                     
                                        File: web.xml
                                        <web-app>
                                        
                                          <servlet>
                                           <servlet-name>dispatcher</servlet-name>
                                           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                                           
                                           <init-param>
                                             <param-name>contextConfigLocation</param-name>
                                             <param-value>/WEB-INK/spring-mvc-demo-servlet.xml</param-value>
                                           </init-param>
                                           
                                           <load-on-startup>1</load-on-startup>
                                         </servlet>
                                         
                                       </web-app>
                                     
                            2) Set up URL mappings to Spring MVC Dispatcher Servlet
                                     
                                     File: web.xml
                                        <web-app>
                                        
                                          <servlet>
                                           <servlet-name>dispatcher</servlet-name>
                                           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                                           ...
                                         </servlet>
                                         
                                         <servlet-mapping>
                                           <servlet-name>dispatcher</servlet-name>
                                           <url-pattern>/</url-pattern>
                                         </servlet-mapping>
                                         
                                       </web-app>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                     
                                     
                                     Spring MVC Configuration Process - Part 2
                                     
                              Add configurations to file: WEB-INF/spring-mvc-demo-servlet.xml
                              
                          3) Add support for Spring component scanning
                              
                                  File: Spring-mvc-demo-servlet.xml
                                  
                                   <beans>
                                   
                                     <!-- Step 3: Add support for comonent scanning -->
                                      <context:component-scan base-package="com.luv2code.springdemo" />
                                   
                                  </beans>
                              
                          4) Add support for conversion,formatting and validation
                              
                               File: Spring-mvc-demo-servlet.xml
                                  
                                   <beans>
                                   
                                     <!-- Step 3: Add support for comonent scanning -->
                                      <context:component-scan base-package="com.luv2code.springdemo" />
                                      
                                     <!-- Step 4: Add support for conversion, formatting and validation support -->
                                     <mvc:annotation-driven/>                                   
                                   
                                  </beans>
                              
                              5) Configure Spring MVC View Resolver
                              
                                          File: Spring-mvc-demo-servlet.xml
                                  
                                   <beans>
                                   
                                     <!-- Step 3: Add support for comonent scanning -->
                                      <context:component-scan base-package="com.luv2code.springdemo" />
                                      
                                     <!-- Step 4: Add support for conversion, formatting and validation support -->
                                     <mvc:annotation-driven/>      
                                     
                                     <!-- Step 5: Define Spring MVC view resolver -->
                                     <bean
                                        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                                          <property name="prefix" value="/WEB-INK/view/" />
                                          <property name="suffix" valiue=".jsp" />
                                     </bean>                             
                                   
                                  </beans>
                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                              
                                                                                                                                         
                          View resolver Configs - Explained
                          
                    * When your app provides a "view" name, Spring MVC will
                    
                       * Prepend the prefix
                       * A[[emd the suffix
                       
                       <bean
                        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                        <property name="prefix" value="/WEB-INK/view/" />
                        <property name="suffix" valiue=".jsp" />
                       </bean> 
                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                Development Process
                                
                1) Create Controller class
                         
                         * Annotate class with @Controller
                         * @Controller inherits from @Component .. suports scanning
                         
                                   @Controller
                                   public class HomerController {
                                   
                                   }
                
                2) Define Controller method
                
                          @Controller
                          public class HomeController {
                          
                              public String showMyPage() {
                                 ....
                             }
                             
                          }
                
                3) Add request Mapping to controller method
                
                           @Controller
                           public class HomeController {
                           
                           @RequestMapping("/")
                           public String showMyPage() {
                           ...
                         }
                      }
                
                4) Return View NAme
                
                                   @Controller
                           public class HomeController {
                           
                           @RequestMapping("/")
                           public String showMyPage() {
                              return "main-menu";
                         }
                      }
                
                
                
                5) Develop View Page
                
                <html><body>
                
                <h2>SPring MVC Demo - Home Page<h2>
                
                </body></html>
                
-------------------------------------------------------------------------------------------------------------------------------------------------------                

                           Controller Class
                           
   @Controller
   public class HelloWorldController {
   
     // Need a controller method to show the initial HTML form
     
     @RequestMapping("/showForm")
     public String showForm() {
       return "helloworld-form";
     }
     
     // Need a controller method to process the HTML form
     
     @RequestMapping("/processForm")
     public String processForm() {
       return "helloworld";
     }
   }
   
--------------------------------------------------------------------------------------------------------------------------------------------------------

                                      Development Process
                                      
                        1) Create Controller class
                        
                        2) Show HTML form
                           a) Create controller method to show HTML Form
                           b) Create View Page for HTML form
                           
                        3) Process HTML Form
                          a) Create controller method to process HTML Form
                          b) Develop View Page for Confirmation
                          
---------------------------------------------------------------------------------------------------------------------------------------------------

                                 Spring MVC Form Tags
                                 
             * Spring MVC Form Tags are the building block for a web page
             
             * Form Tags are configurable and reusable for a web page
             
                  Data Binding
                  
             * Spring MVC FOrm Tags can make use of Data Binding
             
             * Automatically setting / retrieving data from a Java Object / bean
             
          ** Form tags will Generate HTML for you  **
             
             Tag                         Description
             
             form:form                  main form container
             form:input                  Text field
             form:textarea              multi-line text field
             form:checkbox                check box
             form:radiobutton             radio buttons
             form:select                 drop down list
             more...             
                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

                Web Page Structure
                
           * JSP page with special Spring MVC tag form
           
           * Specify the Spring Namespace at beginning of JSP file
           
           Showing Form
           
          In your Spring Controller
           
           * Before you show the form, you must add a model attribute
           
           * This is a bean that will hold form data for the data binding

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

                   Development Process         Step-By-Step
                   
               1) Create Student class
               
               2) Create Student controller class
               
               3) Create HTML form
               
               4) Create form processing code
               
               5) Create confirmation page
               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------               

                                         DropDown list
                                         
                           <form:select path="country">
                           
                                             Value - Code   Label - Display
                                <form:option value="Brazil" label="Brazil" />
                                <form:option value="France" label="France" />
                                <form:option value="Germany" label="Germany" />
                                <form:option value="India" label="India" />
                                <form:option value="America" label="America" />
                                
                           </form:select>
                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

                                           Radio Buttons
                                           
                    Java <form:radiobutton path="favoriteLanguage" value="Java" />
                    C# <form:radiobutton path="favoriteLanguage" value="C#" />
                    PHP <form:radiobutton path="favoriteLanguage" value="PHP" />
                    Ruby <form:radiobutton path="favoriteLanguage" value="Ruby" />
                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            Check Boxes
                         
                      Linux <form:checkbox path="operatingSystems" value="linux" />
                      MacOS <form:checkbox path="operatingSystems" value="Mac OS" />
                      MS Windows <form:checkbox path="operatingSystems" value="MS Windows" />
                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------                      
                    
                                     Validation Annotations
                                     
                      Annotation                  Description
                      @NotNull             Checks that the annotated value is not null
                      @Min                     Must be a number >= value
                      @Max                     Must be a number <= value
                      @Size                   Size must match the given size
                      @Pattern            Must match a regular expression pattern
                      @Future / @Past    Date must be a future or past of given date
                      others ...
                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

                               White Space
                               
                    Trim the whitespace from fields
                    
                    @InitBinder
                    
           * @InitBinder annotation works as a pre-processor
            
           * It will pre-process each web request to our controller
            
           * Method annotated with @InitBinder is executed  
           
           resolves our validation problem. For whitespace.
           
           @InitBinder
           public void initBinder(WebDataBinder dataBinder) {
           
              StringTrimmerEditor StringTrimmerEditor = new StringTrimmerEditor(true);
              
              dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
             }
                                                 ^-Pre-process every String for data                                               
             ...                                 ^-Remove leading and trailing white space
                                                 ^-If String onyl has white space .. trim it to null
                                                 
---------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================
                                                 
                                     Validate a Number Range
                                     
                       * Add a new input field on our form for:Free Passes
                       
                       # User can only enter a range: 0 to 10
                       
                                              Development Process
                                              
                                1) Add validation rule to customer class
                                
                                     import javax.validation.constraints.Min;
                                     import javax.validation.constraints.Max;
                                     
                                     public class Customer {
                                     
                                     @Min(value=0, message="must be greater than or equal to zero")
                                     @Max(value=10, message="must be less than or equal to 10")
                                     private int freePasses;
                                     
                                     // getter/setter methods
                                     
                                  }
                                
                                2) Display error messages on HTML form                                         
                                
                                3) Perform validation in the Controller class
                                
                                4) Update confirmation page
                                
---------------------------------------------------------------------------------------------------------------------------------------

                            Applying Regular Expressions in Spring
                            
                 Reg Ex
                 
                 * A sequence of characters that define a search pattern
                   * This pattern is used to find or match strings
                   
               * Regular Expressions is like its own language (advanced topic)
                  * Assume you already know about RegEx.
                  
                  If not, https://docs.oracle.com/javase/tutorial/essential/regex/
   
--------------------------------------------------------------------------------------------------------------------------------------
                  
                  Validate a Postal Code
                  
             *Add a new input field on our form for: Postal Code  
             
             * User can only enter 5 Chars / Digits
             
             * Apply Regular Expression          
             
                              Dev Process
                              
                    1) Add validation rule to Customer Class
                    
                               import javax.validation.constraints.Pattern;
                               
                               public class Customer {
                               
                                  @Pattern(regexp="^[a-zA-Z0-9]{5}", message="only 5 chars/digits")
                                  private String postalCode;
                                  
                                  // getter/setter methods
                                  
                                }  
                    
                    2) Display error message on HTML form
                    
                    3) Update confirmation page
                    
-----------------------------------------------------------------------------------------------------------------------------------------                       
                                
                                Dev Process
                                
                           1) Create Custom Error Message
                             * src/resources/messages.properties
                             
                           2) Load custom Messages resource in Spring config file
                              * WebContent/WEB-INF/spring-mvc-demo-servlet.xml
                              
---------------------------------------------------------------------------------------------------------------------------------------
                              
                                Custom Validation  
                                
              @ Perform custom validation based on your buisness rules
              
                * Our Example: Course Code must start with "MSW" <- Because i'm awesome and this is my program =]
                
              @ Spring MVC calls our CUSTOM Validation
              
              @ Custom Validation returns boolean value for pass/fail (true/false)
              
======================================================================================================================================              
                               CUSTOM JAVA ANNOTATION FROM SCRATCH
                               
            ** Advanced **
            
            @ For CUSTOM Validation .. we will create a CUSTOM JAVA ANNOTATION
               *@CourseCode  
               
                      @CourseCode(value="MSW", message="must start with MSW")
                      private String courseCode;
                      
--------------------------------------------------------------------------------------------------------------------------------------
                      
                                  DEV Process
                                  
                        1) Create CUSTOM validation rule
                                      
                                @CourseCode(value="MSW", message="must start with MSW")
                                 private String courseCode;
                        
                            a) Create @CourseCode annotation
                            
                                     @Constraint(validateBy = CourseCodeConstraintValidator.class)
                                     @Target( { ElementType.METHOD, ElementType.FIELD } )
                                     @Retention(RententionPolicy.RUNTIME)
                                     public @interface CourseCode {
                                     
                                        // Define default course code
                                        public String value() default "MSW";
                                        
                                        // Define default error message
                                        public String message() default "must start with MSW";
                                        
                                     ...
                                    }
                                      
                            b) Create CourseCodeConstraintValidator
                                     
                                     import javax.validation.ConstraintValidator;
                                     import javax.validation.ConstraintValidatorContext;
                                     
                                     public class CourseCodeConstraintValidator
                                       implements ConstraintValidator<CourseCode, String> {
                                       
                                       private String coursePrefix;
                                       
                                       @Override
                                       public void initialize(CourseCode theCourseCode) {
                                         coursePrefix = theCourseCode.value();
                                       }
                                       
                                       @Override
                                       public boolean isValid(String theCode,
                                                      ConstraintValidatorContext theConstraintValidatorContext) {
                                               
                                           boolean result;
                                           
                                           if (theCode != null) {
                                              result = theCode.startsWith(coursePrefix);
                                            }
                                            else {
                                               result = true;
                                            }
                                            
                                            return result;                                   
                        
                        2) Add validation rule to Customer class
                        
                        3) Display error messages on HTML form
                        
                        4) Update Confirmation page          

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
======================================================================================================================================================================== 